# -*- coding: utf-8 -*-
"""rating_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZKTO2RQXh2vujWq10uSpP9-RhMlbrK-y
"""

!pip install sentence-transformers
!pip install google-generativeai

"""# ** For visitors **
# create a gemini api key and enter it after running the cell below
"""

import getpass
api_key = getpass.getpass("Enter your API key:")

import google.generativeai as gemini
from google.colab import userdata
def extractUserPromptAndJobDescription(user_prompt: str, job_description: str) -> str:

  try:
    gemini.configure(api_key=userdata.get('GOOGLE_API_KEY'))
    mygemini = gemini.GenerativeModel('gemini-2.5-flash-preview-04-17')
    ans1 = mygemini.generate_content(f"Rewrite the following casual job interest statement into a detailed and specific professional summary. {user_prompt}")
    ans2 = mygemini.generate_content(f"Rewrite the following job description into a brief job statement with in 30 words. {job_description}")
    structured_user_prompt = ans1.text
    brief_job_description = ans2.text
    print(structured_user_prompt)
    print(brief_job_description)

  except Exception as e:
    print(f"Error initializing Gemini API: {e}")
    return -1

  return structured_user_prompt, brief_job_description

from sentence_transformers import SentenceTransformer, util



def rate_job3(input: dict) -> float:

  # get the user prompt and store it in a variable
  # and others to like job_description and job_name

  user_prompt = input['user_prompt']
  job_description = input['job_description']
  job_name = input['job_name']

  # “I am a [Qualification] with skills in [Skill 1], [Skill 2], and [Skill 3]. I have experience in [Project/Area] and I’m looking for roles in [Domain/Industry].”

  structured_user_prompt, briefed_job_description = extractUserPromptAndJobDescription(user_prompt, job_description)


  model3 = SentenceTransformer('all-MiniLM-L6-v2')

  encoded_user_prompt = model3.encode(user_prompt, convert_to_tensor=True)
  encoded_job_description = model3.encode(job_description, convert_to_tensor=True)
  encoded_job_name = model3.encode(job_name, convert_to_tensor=True)

  rate1 = util.cos_sim(encoded_user_prompt, encoded_job_description).item()
  rate2 = util.cos_sim(encoded_user_prompt, encoded_job_name).item()

  rate = (rate1*0.8  + rate2*0.6)

  return round(rate * 5, 1)

score = rate_job3({
  "user_prompt": "I'm a CS graduate interested in statistics and machine learning. I've built projects like fraud detection and used car price prediction.",
  "job_name": "Data Scientist",
  "job_description": "Looking for someone with strong math/stats skills, data analysis, and experience with real-world ML projects."
})

score

